/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/


import org.apache.mahout.visualization.MPlot2d

val mxRnd = Matrices.symmetricUniformView(5000000, 2, 1234)
val drmRand = drmParallelize(mxRnd)

val drmSin = drmRand.mapBlock() {case (keys, block) =>  
  val blockB = block.like()
  for (i <- 0 until block.nrow) {
    blockB(i, 0) = block(i, 0) 
    blockB(i, 1) = Math.sin((block(i, 0) * 8))
  }
  keys -> blockB
}
new MPlot2d(drmRand, samplePercent = .1)
new MPlot2d(drmSin, samplePercent = .1)

// 3d scatter
import org.apache.mahout.visualization.MPlot3d
val mxRnd3d = Matrices.symmetricUniformView(50000, 3, 1234)
val drmRand3d = drmParallelize(mxRnd3d)

val drmGauss = drmRand3d.mapBlock() {case (keys, block) =>
  val blockB = block.like()
  for (i <- 0 until block.nrow) {
    val x:Double = block(i, 0)
    val y:Double = block(i, 1)
    val z:Double = block(i, 2)

    blockB(i, 0) = x
    blockB(i, 1) = y
    blockB(i, 2) = Math.exp(-((Math.pow(x, 2)) + (Math.pow(y, 2)))/2)
  }
  keys -> blockB
}

new MPlot3d(drmGauss, samplePercent = 50)


// 3d Surface needs to be ordered.
import org.apache.mahout.visualization.MSurf
new MSurf(drmGauss, samplePercent = 10)


// 3d grid
import org.apache.mahout.visualization.MGrid
val mxRnd3d = Matrices.symmetricUniformView(50000, 3, 1234)
val drmRand3d = drmParallelize(mxRnd3d)

val drmGauss = drmRand3d.mapBlock() {case (keys, block) =>
  val blockB = block.like()
  for (i <- 0 until block.nrow) {
    val x:Double = block(i, 0)
    val y:Double = block(i, 1)
    val z:Double = block(i, 2)

    blockB(i, 0) = x
    blockB(i, 1) = y
    blockB(i, 2) = Math.exp(-((Math.pow(x, 2)) + (Math.pow(y, 2)))/2)
  }
  keys -> blockB
}

new MGrid(drmGauss, samplePercent = 10)



