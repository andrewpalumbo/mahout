import org.apache.mahout.visualization.mplot2d

val mxRnd = Matrices.symmetricUniformView(5000000, 2, 1234)
val drmRand = drmParallelize(mxRnd)

val drmSin = drmRand.mapBlock() {case (keys, block) =>  
  val blockB = block.like()
  for (i <- 0 until block.nrow) {
    blockB(i, 0) = block(i, 0) 
    blockB(i, 1) = Math.sin((block(i, 0) * 8))
  }
  keys -> blockB
}
new mplot2d(drmRand, samplePercent = .1)
new mplot2d(drmSin, samplePercent = .1)

// 3d scatter
import org.apache.mahout.visualization.mplot3d
val mxRnd3d = Matrices.symmetricUniformView(50000, 3, 1234)
val drmRand3d = drmParallelize(mxRnd3d)

val drmGauss = drmRand3d.mapBlock() {case (keys, block) =>
  val blockB = block.like()
  for (i <- 0 until block.nrow) {
    val x:Double = block(i, 0)
    val y:Double = block(i, 1)
    val z:Double = block(i, 2)

    blockB(i, 0) = x
    blockB(i, 1) = y
    blockB(i, 2) = Math.exp(-((Math.pow(x, 2)) + (Math.pow(y, 2)))/2)
  }
  keys -> blockB
}

new mplot3d(drmGauss, samplePercent = 50)


// 3d Surface needs to be ordered.
import org.apache.mahout.visualization.msurf
new msurf3d(drmGauss, samplePercent = 10)



